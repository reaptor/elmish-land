//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by elmish-land.
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

module ElmishLand.{{RootModule}}.App

open Elmish
open Elmish.HMR
open Feliz
open Feliz.Router
open {{ViewModule}}
open ElmishLand
open {{RootModule}}
open {{RootModule}}.Shared

[<RequireQualifiedAccess>]
type LayoutName =
    {{#each Layouts}}
    | {{Name}}
    {{/each}}
    | None

[<RequireQualifiedAccess>]
type Layout =
    {{#each Layouts}}
    | {{Name}} of {{ModuleName}}.Props * {{ModuleName}}.Model
    {{/each}}
    | None

[<RequireQualifiedAccess>]
type LayoutMsg =
    {{#each Layouts}}
    | {{MsgName}} of {{ModuleName}}.Msg
    {{/each}}
    | NoOp

[<RequireQualifiedAccess>]
type PageMsg =
    {{#each Routes}}
    | {{MsgName}} of {{ModuleName}}.Msg
    {{/each}}

type Msg =
    | SharedMsg of SharedMsg
    | RouteChanged of Route
    | PageMsg of PageMsg
    | LayoutMsg of LayoutMsg

type MappedPage<'pageMsg, 'pageModel, 'layoutMsg, 'layoutProps> =
    {
        Init: unit -> 'pageModel * Command<Msg, SharedMsg, Msg>
        Update: 'pageMsg -> 'pageModel -> 'pageModel * Command<Msg, SharedMsg, Msg>
        View: 'pageModel -> ('pageMsg -> unit) -> {{ViewType}}
        Subscriptions: 'pageModel -> (string list * (('pageMsg -> unit) -> System.IDisposable)) list
        LayoutProps: 'layoutProps
        LayoutMsgToPageMsg: 'layoutMsg -> 'pageMsg
        LayoutMsgToMsg: 'layoutMsg -> Msg
    }

[<RequireQualifiedAccess>]
type PageModel =
    {{#each Routes}}
    | {{Name}} of {{ModuleName}}.Model
    {{/each}}
    | NotFound

[<RequireQualifiedAccess>]
type Page =
    {{#each Routes}}
    | {{Name}} of MappedPage<{{ModuleName}}.Msg, {{ModuleName}}.Model, {{LayoutModuleName}}.Msg, {{LayoutModuleName}}.Props>
    {{/each}}
    | NotFound

type Model = {
    Shared: SharedModel
    CurrentRoute: Route
    CurrentPage: Page
    CurrentPageModel: PageModel
    CurrentLayout: Layout
    CurrentLayoutName: LayoutName
    PageModelByLayout: Map<LayoutName, Page>
}

let rec commandToCmd fromSharedMsg fromLayoutMsg command =
    match command with
    | Command.None -> Cmd.none
    | Command.Batch cmds -> Cmd.batch (List.map (commandToCmd fromSharedMsg fromLayoutMsg) cmds)
    | Command.Cmd cmd -> cmd
    | Command.SharedMsg msg -> Cmd.ofMsg (fromSharedMsg msg)
    | Command.LayoutMsg msg -> Cmd.ofMsg (fromLayoutMsg msg)

{{#each Layouts}}
let get{{Name}}Layout currentLayout currentRoute sharedModel layoutProps =
    let layout = {{ModuleName}}.layout layoutProps currentRoute sharedModel
    match currentLayout with
    | Layout.{{Name}} (_, m) -> layout.RouteChanged m
    | _ -> layout.Init ()

{{/each}}
let mapPage (f: 'pageMsg -> Msg) (mapLayout: 'layoutMsg -> Msg) (p: Page<SharedMsg, 'pageModel, 'pageMsg, 'layoutMsg, 'layoutProps>)
    : MappedPage<'pageMsg, 'pageModel, 'layoutMsg, 'layoutProps> =
    let init = p.Init >> fun (m, c) -> m, Command.map f mapLayout c
    let update =
        p.Update >>
        fun f' -> f'
                >> fun (m: 'pageModel, c: Command<'pageMsg, SharedMsg, 'layoutMsg>) ->
                    (m, Command.map f mapLayout c)
    let layoutMsgToPageMsg layoutMsg =
        p.LayoutMsgToPageMsg layoutMsg |> f

    {
        Init = init
        Update = update
        View = p.View
        Subscriptions = p.Subscriptions
        LayoutProps = p.LayoutProps
        LayoutMsgToPageMsg = p.LayoutMsgToPageMsg
        LayoutMsgToMsg = layoutMsgToPageMsg
    }

let layoutMsgToPageMsg page f layoutMsg = page.LayoutMsgToPageMsg layoutMsg |> f

{{#each Routes}}
let init{{Name}}Page model route sharedCmd =
    let mappedPage = ({{ModuleName}}.page model.Shared route |> mapPage (PageMsg.{{Name}}Msg >> PageMsg) (LayoutMsg.{{LayoutName}}Msg >> LayoutMsg))
    let pageModel, pageCmd = mappedPage.Init ()
    let layoutModel, layoutCmd = (get{{LayoutName}}Layout model.CurrentLayout (Route.{{Name}} route)) model.Shared mappedPage.LayoutProps
    let layout = Layout.{{LayoutName}} (mappedPage.LayoutProps, layoutModel)
    {
        model with
            CurrentRoute = Route.{{Name}} route
            CurrentPage = Page.{{Name}} mappedPage
            CurrentPageModel = PageModel.{{Name}} pageModel
            CurrentLayout = layout
            CurrentLayoutName = LayoutName.{{LayoutName}}
            PageModelByLayout = Map.change LayoutName.{{LayoutName}} (fun _ -> Some (Page.{{Name}} mappedPage)) model.PageModelByLayout
    },
    Command.batch [
        sharedCmd
        pageCmd
        Command.map mappedPage.LayoutMsgToMsg mappedPage.LayoutMsgToMsg layoutCmd
        Command.map (LayoutMsg.{{LayoutName}}Msg >> LayoutMsg) (LayoutMsg.{{LayoutName}}Msg >> LayoutMsg) layoutCmd
    ] |> commandToCmd SharedMsg id

{{/each}}
let init () =
    let initialUrl = Route.parse (Router.currentUrl ())
    let sharedModel, sharedCmd = Shared.init ()

    let defaultModel = {
        Shared = sharedModel
        CurrentRoute = initialUrl
        CurrentPage = Page.NotFound
        CurrentPageModel = PageModel.NotFound
        CurrentLayout = Layout.None
        CurrentLayoutName = LayoutName.None
        PageModelByLayout = Map.empty
    }

    match initialUrl with
    {{#each Routes}}
    | Route.{{Name}} route ->
        init{{Name}}Page defaultModel route sharedCmd
    {{/each}}
    | Route.NotFound ->
        {
            defaultModel with
                CurrentPage = Page.NotFound
        },
        Cmd.none

let update (msg: Msg) (model: Model) =
    let updateLayout (model: Model) (layout: Layout<_,_,_>) props model' mapLayout layoutMsg msg pageCmd =
        let model'', cmd = layout.Update layoutMsg model'

        {
            model with
                CurrentLayout = mapLayout (props, model'')
        },
        Command.batch [
            Command.map msg msg cmd
            pageCmd
        ]
        |> commandToCmd SharedMsg id

    match msg with
    | SharedMsg msg' ->
        let model'', cmd = Shared.update msg' model.Shared
        { model with Shared = model'' }, commandToCmd SharedMsg Unchecked.defaultof<_> cmd
    | RouteChanged nextRoute ->
        if model.CurrentRoute = nextRoute then
            model, Cmd.none
        else
            match nextRoute with
            {{#each Routes}}
            | Route.{{Name}} route ->
                init{{Name}}Page model route Command.none
            {{/each}}
            | Route.NotFound ->
                {
                    model with
                        CurrentPage = Page.NotFound
                        CurrentRoute = Route.NotFound
                        CurrentLayout = Layout.None
                        CurrentLayoutName = LayoutName.None
                },
                Cmd.none
    | PageMsg pageMsg ->
        match model.CurrentPage, pageMsg, model.CurrentPageModel with
        {{#each Routes}}
        | Page.{{Name}} mappedPage, PageMsg.{{Name}}Msg pageMsg', PageModel.{{Name}} pageModel ->
            let pageModel, pageCmd = mappedPage.Update pageMsg' pageModel
            {
                model with
                    CurrentPageModel = PageModel.{{Name}} pageModel
            },
            commandToCmd SharedMsg id pageCmd
        {{/each}}
        | currentPage, pageMsg, currentPageModel ->
            printfn $"Unhandled CurrentPage, PageMsg, CurrentPageModel, CurrentRoute. Got\nCurrentPage:\n%A{currentPage}\nPageMsg:\n%A{pageMsg}\nCurrentPageModel:\n%A{currentPageModel}"
            model, Cmd.none
    | LayoutMsg layoutMsg ->
        let updatePage layoutMsg =
            model.PageModelByLayout
            |> Map.tryFind model.CurrentLayoutName
            |> function
                | Some p ->
                    match p, model.CurrentPageModel, layoutMsg with
                    {{#each Routes}}
                    | Page.{{Name}} mappedPage, PageModel.{{Name}} m, LayoutMsg.{{LayoutName}}Msg layoutMsg' ->
                        let pageMsg = mappedPage.LayoutMsgToPageMsg layoutMsg'
                        let m, cmd = mappedPage.Update pageMsg m
                        { model with
                            CurrentPageModel = PageModel.{{Name}} m
                        }
                        , cmd
                    {{/each}}
                    | _ -> model, Command.none
                | _ -> model, Command.none

        match layoutMsg, model.CurrentLayout with
        {{#each Layouts}}
        | LayoutMsg.{{Name}}Msg layoutMsg', Layout.{{Name}} (props, model') ->
            let model, pageCmd = updatePage (LayoutMsg.{{Name}}Msg layoutMsg')
            let layout = ({{ModuleName}}.layout props model.CurrentRoute model.Shared)
            updateLayout model layout props model' Layout.{{Name}} layoutMsg' (LayoutMsg.{{Name}}Msg >> LayoutMsg) pageCmd
        {{/each}}
        | layoutMsg', layout ->
            printfn $"Unhandled LayoutMsg and CurrentLayout. Got\nLayoutMsg:\n%A{layoutMsg'}\nCurrentLayout:\n%A{layout}"
            model, Cmd.none

let inline (|Renderable|) (o: 'x when 'x: (member Render: unit -> ReactElement)) = o

let view (model: Model) (dispatch: Msg -> unit) =
    let currentPageView =
        match model.CurrentPageModel, model.CurrentRoute with
        {{#each Routes}}
        | PageModel.{{Name}} m, Route.{{Name}} route ->
            ({{ModuleName}}.page model.Shared route).View m (PageMsg.{{MsgName}} >> PageMsg >> dispatch)
        {{/each}}
        | _ -> {{RootModule}}.Pages.NotFound.view ()

    let currentView =
        match model.CurrentLayout with
        {{#each Layouts}}
        | Layout.{{Name}} (props, m) ->
            ({{ModuleName}}.layout props model.CurrentRoute model.Shared).View m currentPageView (LayoutMsg.{{MsgName}} >> LayoutMsg >> dispatch)
        {{/each}}
        | Layout.None -> currentPageView

    let currentReactElement =
        {{#if ViewTypeIsReact}}
        currentView
        {{else}}
        match currentView with
        | Renderable x -> x.Render()
        {{/if}}

    React.router [
        router.onUrlChanged (Route.parse >> RouteChanged >> dispatch)
        router.children [ currentReactElement ]
    ]

let subscribe model =
    Sub.batch [
        Sub.map "Shared" SharedMsg (Shared.subscriptions model.Shared)
        match model.CurrentLayout with
        {{#each Layouts}}
        | Layout.{{Name}} (props, m) -> Sub.map "Layout{{Name}}" (LayoutMsg.{{MsgName}} >> LayoutMsg) (({{ModuleName}}.layout props model.CurrentRoute model.Shared).Subscriptions m)
        {{/each}}
        | _ -> Sub.none
        match model.CurrentRoute, model.CurrentPageModel with
        {{#each Routes}}
        | Route.{{Name}} route, PageModel.{{Name}} pageModel ->
            Sub.map "Page{{Name}}" (PageMsg.{{MsgName}} >> PageMsg) (({{ModuleName}}.page model.Shared route).Subscriptions pageModel)
        {{/each}}
        | _ -> Sub.none
    ]

Program.mkProgram init update view
|> Program.withErrorHandler (fun (msg, ex) -> printfn "Program error handler:\r\n%s\r\n%O" msg ex)
|> Program.withReactBatched "app"
|> Program.withSubscription subscribe
|> Program.run
